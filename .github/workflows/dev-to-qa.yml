name: Dev to QA Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - qa
    types: [opened, synchronize, reopened]

jobs:
  # Como estamos testando com push para main, vamos pular a verificação de branch de origem
  # check_source_branch:
  #   name: Check source branch
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check source branch is dev
  #       run: |
  #         if [[ "${{ github.head_ref }}" != "dev" ]]; then
  #           echo "This workflow is only for PRs from dev to qa"
  #           exit 1
  #         fi
  #       shell: bash

  setup_environment:
    name: Setup Environment
    runs-on: ubuntu-latest
    # needs: check_source_branch  # Comentado para testes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt
      
      - name: Install Databricks CLI
        run: |
          echo "Instalando o CLI do Databricks..."
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          echo "$HOME/.databricks/bin" >> $GITHUB_PATH
          # Verificar se o CLI foi instalado corretamente
          ls -la $HOME/.databricks/bin
      
      - name: Cache environment
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.databricks
          key: ${{ runner.os }}-pip-databricks-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-databricks-

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup_environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
        
      - name: Restore cached environment
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.databricks
          key: ${{ runner.os }}-pip-databricks-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-databricks-
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -e .
          pip install -r requirements-dev.txt
      
      - name: Run unit tests
        run: pytest -xvs tests/
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          
  validate_databricks_bundle:
    name: Validate Databricks Bundle
    runs-on: ubuntu-latest
    needs: setup_environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
        
      - name: Restore cached environment
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.databricks
          key: ${{ runner.os }}-pip-databricks-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-databricks-

      - name: Install Databricks CLI
        run: |
          echo "Instalando o CLI do Databricks..."
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          echo "$HOME/.databricks/bin" >> $GITHUB_PATH
          # Verificar se o CLI foi instalado corretamente
          ls -la $HOME/.databricks/bin

      - name: Validate bundle format
        run: |
          databricks bundle validate
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }} 