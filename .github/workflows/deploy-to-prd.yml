name: Deploy to PRD

on:
  push:
    branches:
      - prd

jobs:
  deploy_to_prd:
    name: Deploy to PRD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Databricks CLI
        run: |
          echo "Instalando o CLI do Databricks..."
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          # Verificar se o CLI foi instalado corretamente
          which databricks
        
      - name: Deploy to PRD
        run: |
          databricks bundle deploy -t prod
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
  
  verify_production_deployment:
    name: Verify Production Deployment
    runs-on: ubuntu-latest
    needs: deploy_to_prd
    environment:
      name: production
    # This step requires manual approval for safety with the "environment: production" config
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
        
      - name: Install databricks-cli
        run: pip install databricks-cli
      
      - name: Verify Production Deployment
        run: |
          # Run a minimal test to verify the deployment works
          databricks bundles run job-get_taxis --target prod
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
  
  tag_release:
    name: Tag Release
    runs-on: ubuntu-latest
    needs: verify_production_deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git user
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
      
      - name: Generate release date
        id: date
        run: echo "::set-output name=date::$(date +'%Y.%m.%d')"
      
      - name: Create Release Tag
        run: |
          VERSION="${{ steps.date.outputs.date }}-$(git rev-parse --short HEAD)"
          git tag -a "v$VERSION" -m "Production release $VERSION"
          git push origin "v$VERSION" 